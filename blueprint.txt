BLUEPRINT COMPLETO DO SISTEMA CERTX

  📋 VISÃO GERAL

  CertX é um sistema de gerenciamento de Declarações de Conformidade (DCs) para instrumentos de medição, desenvolvido com arquitetura moderna e containerizada.

  ---
  🏗️ ARQUITETURA DO SISTEMA

  Stack Tecnológico

  ┌─────────────────┬─────────────────┬─────────────────┐
  │    FRONTEND     │     BACKEND     │   BANCO DADOS   │
  ├─────────────────┼─────────────────┼─────────────────┤
  │ React 19        │ Node.js/Express │ PostgreSQL 15   │
  │ Vite            │ Prisma ORM      │                 │
  │ React Router 7  │ JWT Auth        │                 │
  │ Lucide Icons    │ Multer/PDF-lib  │                 │
  └─────────────────┴─────────────────┴─────────────────┘

  Infraestrutura (Docker)

  Services:
  ├── Frontend (Port 8080) - React SPA
  ├── Backend (Port 3333) - API REST
  └── Database (Port 5434) - PostgreSQL

  Networks: certx-network (bridge)
  Volumes: pgdata (persistent storage)

  ---
  📊 MODELO DE DADOS

  Entidades Principais

  ┌─── EMPRESAS ────┐    ┌─── USUARIOS_CUSTOM ────┐
  │ • id            │────│ • id                   │
  │ • nome          │    │ • nome, email, senha   │
  └─────────────────┘    │ • empresa_id (FK)      │
                         │ • ativo, reset_token   │
                         └────────┬───────────────┘
                                 │
      ┌─── DCS ───────────────────┼───────────────┐
      │ • id, id_usuario (FK)     │               │
      │ • empresa_id (FK)         │               │
      │ • status, estimativa_gru  │               │
      │ • datas (criacao, envio)  │               │
      └───────────┬───────────────┘               │
                  │                               │
  ┌─── INSTRUMENTOS ────┐    ┌─── SOLICITACOES_API ─┴──┐
  │ • id_dc (FK)        │    │ • id_usuario (FK)       │
  │ • tipo, marca       │    │ • id_dc (FK)            │
  │ • modelo, serie     │    │ • payload, resposta     │
  │ • capacidades       │    │ • cnpj, razao_social    │
  │ • status, taxa      │    │ • endereco, municipio   │
  └─────────────────────┘    └─────────────────────────┘

  ---
  🚀 FUNCIONALIDADES IMPLEMENTADAS

  🔐 Autenticação & Autorização

  - Login/Logout com JWT
  - Recuperação de senha via email
  - Redefinição de senha com token
  - Sistema de empresas multi-tenant
  - Middleware de autenticação

  👤 Gestão de Usuários

  - Cadastro de usuários
  - Perfil do usuário editável
  - Vinculação empresa-usuário
  - Ativação/desativação de contas

  📋 Gerenciamento de DCs

  - Criação de Declarações de Conformidade
  - Listagem e consulta de DCs
  - Estados do workflow: NOVA → ENVIADA → PROCESSADA
  - Estimativa de custos (GRU)
  - Histórico de modificações

  🔧 Gestão de Instrumentos

  - Cadastro de instrumentos por DC
  - Tipos: Balanças, Instrumentos Diversos
  - Dados técnicos completos (série, capacidade, etc.)
  - Upload de documentos PDF
  - Status individual por instrumento

  🌐 Integração Externa (API)

  - Sistema de solicitações à API externa
  - Payload estruturado para envio
  - Armazenamento de respostas
  - Rastreamento por CNPJ/empresa

  ---
  🗂️ ESTRUTURA DE ARQUIVOS

  Backend (/backend/)

  api/
  ├── controllers/     # Lógica de negócio
  ├── routes/         # Definição de rotas
  │   ├── auth.js     # Autenticação
  │   ├── dc.js       # Declarações
  │   └── empresas.js # Empresas
  ├── middleware/     # Middlewares (auth, validation)
  ├── services/       # Serviços (email, api externa)
  └── validators/     # Validação de dados

  prisma/
  ├── schema.prisma   # Modelo de dados
  └── migrations/     # Migrações do DB

  config/            # Configurações
  scripts/           # Scripts auxiliares
  server.js          # Entrada da aplicação

  Frontend (/frontend/)

  src/
  ├── components/     # Componentes reutilizáveis
  │   ├── UserProfileMenu.jsx
  │   ├── DCWorkflowStatus.jsx
  │   └── ModalRegistro.jsx
  ├── pages/          # Páginas da aplicação
  │   ├── Login.jsx
  │   ├── Cadastro.jsx
  │   ├── DCList.jsx
  │   └── ConsultarDC.jsx
  ├── services/       # Integração com API
  ├── context/        # Context API (AuthContext)
  ├── utils/          # Utilitários
  └── styles/         # Estilos CSS

  ---
  🔄 FLUXOS DE TRABALHO

  1. Fluxo de Criação de DC

  Usuario → Login → Dashboard → Nova DC →
  Adicionar Instrumentos → Enviar → Aguardar Processamento

  2. Estados da DC

  NOVA → ENVIADA → PROCESSADA
    ↓        ↓         ↓
  Editável  Readonly  Completa

  3. Integração API Externa

  DC Enviada → Payload JSON → API Externa →
  Resposta → Atualização Status → Notificação

  ---
  🚀 DEPLOY E CONFIGURAÇÃO

  Variáveis de Ambiente

  Root (.env)
  DB_PASSWORD=postgres
  JWT_SECRET=segredo123
  DB_PORT=5434

  Backend (.env)
  DATABASE_URL=postgresql://postgres:postgres@db:5432/certX-db
  JWT_SECRET=segredo123
  PORT=3333
  USE_AUTH=true
  NODE_ENV=production

  Frontend (.env)
  VITE_API_URL=/api
  VITE_USE_AUTH=true

  Comandos de Deploy

  # Deploy completo
  ./deploy.sh

  # Deploy manual
  docker-compose build
  docker-compose up -d
  docker-compose exec backend npx prisma migrate deploy

  ---
  📋 ENDPOINTS DA API

  Autenticação (/api/auth)

  - POST /login - Login do usuário
  - POST /register - Cadastro
  - POST /forgot-password - Recuperar senha
  - POST /reset-password - Redefinir senha
  - GET /me - Dados do usuário logado

  Declarações (/api/dc)

  - GET / - Listar DCs do usuário
  - POST / - Criar nova DC
  - GET /:id - Consultar DC específica
  - PUT /:id - Atualizar DC
  - POST /:id/instrumentos - Adicionar instrumento
  - POST /:id/enviar - Enviar DC para processamento

  Empresas (/api/empresas)

  - GET / - Listar empresas
  - POST / - Criar empresa

  ---
  🎯 FUNCIONALIDADES EM DESTAQUE

  1. Sistema Multi-tenant

  - Isolamento por empresa
  - Usuários vinculados a empresas específicas
  - DCs organizadas por empresa

  2. Workflow Robusto

  - Estados bem definidos para DCs
  - Rastreamento de mudanças
  - Estimativas de custo automáticas

  3. Upload e Gestão de Arquivos

  - Upload de PDFs para instrumentos
  - Armazenamento seguro no backend
  - Validação de tipos de arquivo

  4. Interface Responsiva

  - Design moderno com React
  - Componentes reutilizáveis
  - Estados de loading e feedback

  5. Segurança

  - JWT para autenticação
  - Bcrypt para senhas
  - Validação de entrada
  - CORS configurado

  ---
  🛠️ PRÓXIMOS DESENVOLVIMENTOS SUGERIDOS

  Funcionalidades

  - Dashboard com métricas
  - Relatórios em PDF
  - Notificações por email
  - Sistema de permissões por role
  - API para integração externa

  Melhorias Técnicas

  - Testes automatizados
  - Logging estruturado
  - Monitoramento de performance
  - Cache Redis
  - Rate limiting

  UX/UI

  - Modo escuro
  - PWA (Progressive Web App)
  - Filtros avançados
  - Exportação de dados
  - Busca global

  ---
  Este blueprint representa um sistema robusto, escalável e moderno para gerenciamento de Declarações de Conformidade, pronto para produção e com arquitetura que facilita futuras expansões.